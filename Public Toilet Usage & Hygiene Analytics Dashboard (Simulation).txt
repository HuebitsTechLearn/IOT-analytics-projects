import React, { useState, useEffect } from 'react';

// Define stall statuses and their corresponding colors
const STALL_STATUSES = {
  VACANT: 'vacant',
  OCCUPIED: 'occupied',
  NEEDS_CLEANING: 'needs_cleaning',
  CLEANING_IN_PROGRESS: 'cleaning_in_progress',
};

const STATUS_COLORS = {
  [STALL_STATUSES.VACANT]: 'bg-green-500',
  [STALL_STATUSES.OCCUPIED]: 'bg-red-500',
  [STALL_STATUSES.NEEDS_CLEANING]: 'bg-orange-500',
  [STALL_STATUSES.CLEANING_IN_PROGRESS]: 'bg-yellow-500 text-gray-900',
};

// Simulate a block of toilet stalls
const NUM_STALLS = 12; // Example: 10 regular + 2 accessible
const TOILET_TYPES = {
  REGULAR: 'Regular',
  ACCESSIBLE: 'Accessible',
};

// Initial state for all stalls
const initialStalls = Array.from({ length: NUM_STALLS }).map((_, index) => ({
  id: `stall-${index + 1}`,
  type: index >= 10 ? TOILET_TYPES.ACCESSIBLE : TOILET_TYPES.REGULAR, // Last two are accessible
  status: STALL_STATUSES.VACANT,
  lastOccupancyTime: null, // To track duration
  usageCount: 0,
  flushCount: 0,
  handwashCount: 0,
  cleaningScore: 100, // Higher is cleaner, degrades with usage
  lastCleaned: Date.now(),
  alert: null, // Specific alert for this stall
}));

// Main App component for the Public Toilet Analytics Dashboard
function App() {
  const [stalls, setStalls] = useState(initialStalls);
  const [overallHygieneAlert, setOverallHygieneAlert] = useState(null);
  const [totalUsageToday, setTotalUsageToday] = useState(0);
  const [lastCleaningCheck, setLastCleaningCheck] = useState(Date.now());

  /**
   * Simulates real-time sensor data updates for each stall.
   * In a real system, this would come from NodeMCU/ESP32 devices.
   */
  useEffect(() => {
    const dataInterval = setInterval(() => {
      setStalls(prevStalls => {
        const updatedStalls = prevStalls.map(stall => {
          let newStall = { ...stall };

          // Simulate PIR (occupancy) and Door Switch
          if (newStall.status === STALL_STATUSES.VACANT) {
            if (Math.random() < 0.05) { // 5% chance of becoming occupied
              newStall.status = STALL_STATUSES.OCCUPIED;
              newStall.lastOccupancyTime = Date.now();
              newStall.usageCount++;
            }
          } else if (newStall.status === STALL_STATUSES.OCCUPIED) {
            const occupancyDuration = (Date.now() - newStall.lastOccupancyTime) / 1000; // seconds
            if (occupancyDuration > 15 && Math.random() < 0.2) { // After 15s, 20% chance to become vacant
              newStall.status = STALL_STATUSES.VACANT;
              // Simulate flushing and handwashing activity upon exiting
              newStall.flushCount += Math.random() < 0.9 ? 1 : 0; // 90% chance to flush
              newStall.handwashCount += Math.random() < 0.8 ? 1 : 0; // 80% chance to handwash

              // Degrade cleaning score with usage
              newStall.cleaningScore = Math.max(0, newStall.cleaningScore - Math.floor(Math.random() * 5 + 1)); // -1 to -5

            } else if (occupancyDuration > 120 && newStall.alert !== 'Prolonged Occupancy!') { // 2 minutes
                newStall.alert = 'Prolonged Occupancy!';
            } else if (newStall.alert === 'Prolonged Occupancy!' && occupancyDuration <= 120) {
                 newStall.alert = null; // Clear alert if person leaves
            }

          } else if (newStall.status === STALL_STATUSES.CLEANING_IN_PROGRESS) {
            if ((Date.now() - newStall.lastCleaned) / 1000 > 10) { // Cleaning takes 10 seconds
              newStall.status = STALL_STATUSES.VACANT;
              newStall.cleaningScore = 100; // Reset score
              newStall.alert = null; // Clear any cleaning alerts
              newStall.lastCleaned = Date.now();
            }
          } else if (newStall.status === STALL_STATUSES.NEEDS_CLEANING) {
            // A cleaning staff would pick this up in a real system
            // For simulation, let's say it transitions to cleaning after a while or by external trigger
            if (Math.random() < 0.02) { // 2% chance cleaning starts automatically
                 newStall.status = STALL_STATUSES.CLEANING_IN_PROGRESS;
            }
          }

          // Check if stall needs cleaning based on score
          if (newStall.cleaningScore <= 60 && newStall.status !== STALL_STATUSES.NEEDS_CLEANING && newStall.status !== STALL_STATUSES.CLEANING_IN_PROGRESS) {
            newStall.status = STALL_STATUSES.NEEDS_CLEANING;
            newStall.alert = 'Needs Cleaning!';
          }


          // Simulate water flow anomalies (low/high)
          if (newStall.status === STALL_STATUSES.VACANT && Math.random() < 0.01) { // 1% chance for anomaly
            if (Math.random() < 0.5) {
                newStall.alert = 'Low Water Flow Detected!';
            } else {
                newStall.alert = 'Continuous Water Flow Detected (Leak)!';
            }
             setTimeout(() => newStall.alert = null, 10000); // Clear after 10s
          }

          return newStall;
        });

        // Update overall usage count
        const currentTotalUsage = updatedStalls.reduce((sum, stall) => sum + stall.usageCount, 0);
        setTotalUsageToday(currentTotalUsage);

        // Check for overall hygiene alert (e.g., if many stalls need cleaning)
        const stallsNeedingCleaning = updatedStalls.filter(s => s.status === STALL_STATUSES.NEEDS_CLEANING).length;
        if (stallsNeedingCleaning > NUM_STALLS * 0.3 && !overallHygieneAlert) { // More than 30% need cleaning
          setOverallHygieneAlert('High number of stalls require cleaning. Deploy staff!');
        } else if (stallsNeedingCleaning <= NUM_STALLS * 0.3 && overallHygieneAlert) {
          setOverallHygieneAlert(null);
        }

        // Simulate cleaning staff action (manual trigger for a stall)
        if (Math.random() < 0.005) { // Small chance a random stall gets cleaned manually
            const needyStalls = updatedStalls.filter(s => s.status === STALL_STATUSES.NEEDS_CLEANING);
            if (needyStalls.length > 0) {
                const randomNeedyIndex = updatedStalls.findIndex(s => s.id === needyStalls[Math.floor(Math.random() * needyStalls.length)].id);
                updatedStalls[randomNeedyIndex].status = STALL_STATUSES.CLEANING_IN_PROGRESS;
                updatedStalls[randomNeedyIndex].alert = 'Cleaning Started!';
                updatedStalls[randomNeedyIndex].lastCleaned = Date.now(); // Mark cleaning start time
            }
        }


        return updatedStalls;
      });
    }, 2000); // Update every 2 seconds

    return () => clearInterval(dataInterval); // Cleanup on component unmount
  }, [overallHygieneAlert]); // Dependency for re-evaluating overall alert

  /**
   * Helper to get stall color based on status.
   */
  const getStallColor = (status) => {
    return STATUS_COLORS[status] || 'bg-gray-400';
  };

  /**
   * Manually trigger cleaning for a stall (simulated staff action).
   */
  const triggerCleaning = (stallId) => {
    setStalls(prevStalls => {
      const updatedStalls = prevStalls.map(stall => {
        if (stall.id === stallId) {
          return {
            ...stall,
            status: STALL_STATUSES.CLEANING_IN_PROGRESS,
            alert: 'Cleaning Triggered!',
            lastCleaned: Date.now(), // Reset cleaning time immediately
          };
        }
        return stall;
      });
      return updatedStalls;
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-700 text-gray-100 font-inter p-4 sm:p-8 rounded-lg shadow-xl">
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <script src="https://cdn.tailwindcss.com"></script>
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />

      {/* Header Section */}
      <header className="text-center mb-8">
        <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-cyan-600 mb-2">
          Public Toilet Usage & Hygiene Analytics
        </h1>
        <p className="text-lg text-gray-300">Smart Management for Urban Restrooms</p>
      </header>

      {/* Overall Status & Alerts */}
      <section className="bg-gray-800 p-6 rounded-lg shadow-lg border border-blue-700 mb-8">
        <h2 className="text-2xl sm:text-3xl font-bold text-center text-blue-300 mb-3">
          Overall Status: <span className="text-blue-400">Monitoring Active</span>
        </h2>
        <p className="text-xl text-center text-gray-200 mb-4">
          Total Usage Today: <span className="font-bold text-cyan-400">{totalUsageToday} visits</span>
        </p>
        {overallHygieneAlert && (
          <div className="mt-4 p-4 bg-red-600 text-white rounded-md text-center text-lg font-semibold animate-pulse">
            <p>CRITICAL ALERT: {overallHygieneAlert}</p>
            <p className="text-sm">Please dispatch cleaning staff immediately.</p>
          </div>
        )}
      </section>

      {/* Toilet Stalls Grid */}
      <section className="mb-8 p-6 bg-gray-800 rounded-lg shadow-lg border border-gray-700">
        <h2 className="text-2xl font-bold text-gray-200 mb-4 text-center">Live Stall Status</h2>
        <div className="grid gap-4 mx-auto" style={{ gridTemplateColumns: `repeat(auto-fill, minmax(8rem, 1fr))` }}>
          {stalls.map(stall => (
            <div
              key={stall.id}
              className={`p-4 rounded-lg shadow-md transition-colors duration-300 flex flex-col items-center justify-center text-center
                ${getStallColor(stall.status)}`}
              title={`${stall.id} (${stall.type})\nUsage: ${stall.usageCount}, Flushes: ${stall.flushCount}, Handwash: ${stall.handwashCount}\nCleanliness: ${stall.cleaningScore}%`}
            >
              <p className="text-lg font-bold text-white">{stall.id.split('-')[1]} ({stall.type === TOILET_TYPES.ACCESSIBLE ? 'Acc.' : 'Reg.'})</p>
              <p className="text-sm text-white capitalize">{stall.status.replace(/_/g, ' ')}</p>
              {stall.alert && <p className="text-xs text-white bg-gray-900 px-2 py-1 rounded mt-1 animate-pulse">{stall.alert}</p>}
              {stall.status === STALL_STATUSES.NEEDS_CLEANING && (
                <button
                  onClick={() => triggerCleaning(stall.id)}
                  className="mt-2 px-3 py-1 bg-blue-700 text-white text-sm rounded-md hover:bg-blue-800 transition duration-200 shadow"
                >
                  Clean Now
                </button>
              )}
            </div>
          ))}
        </div>
        <p className="text-center text-gray-400 text-sm mt-4">Hover over stalls for detailed usage and hygiene info.</p>
      </section>

      {/* Legend */}
      <section className="mb-8 p-6 bg-gray-800 rounded-lg shadow-lg border border-gray-700">
        <h2 className="text-2xl font-bold text-gray-200 mb-4 text-center">Stall Status Legend</h2>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm text-center">
          <div className="p-3 rounded-md bg-green-500 text-white font-semibold">Vacant</div>
          <div className="p-3 rounded-md bg-red-500 text-white font-semibold">Occupied</div>
          <div className="p-3 rounded-md bg-orange-500 text-white font-semibold">Needs Cleaning</div>
          <div className="p-3 rounded-md bg-yellow-500 text-gray-900 font-semibold">Cleaning in Progress</div>
        </div>
      </section>

      {/* System Information / Disclaimer */}
      <section className="bg-gray-800 p-6 rounded-lg shadow-lg border border-gray-700 text-gray-400 text-sm italic">
        <h3 className="text-lg font-semibold mb-2 text-gray-200">System Information:</h3>
        <p>
          This dashboard provides a conceptual simulation of a Public Toilet Usage & Hygiene Analytics system.
          In a complete system, real-time data from PIR, door, and water flow sensors on NodeMCU/ESP32 devices
          would be securely transmitted to Firebase (Firestore). A Python backend with Firebase Functions would
          then process this data to identify usage patterns, track cleaning adherence, and trigger alerts.
        </p>
        <p className="mt-2 text-xs">
          <span className="font-bold">Disclaimer:</span> This is a simulated environment and should not be used for actual facility management or critical public health decisions.
        </p>
      </section>

      {/* Footer Section */}
      <footer className="text-center mt-8 text-gray-500 text-sm">
        <p>&copy; {new Date().getFullYear()} Smart City Solutions. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;
