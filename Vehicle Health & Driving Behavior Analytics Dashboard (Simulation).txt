import React, { useState, useEffect } from 'react';

// Main App component for the Vehicle Health & Driving Behavior Dashboard
function App() {
  // State variables for simulated vehicle data
  const [vehicleId, setVehicleId] = useState('Fleet-001');
  const [engineRPM, setEngineRPM] = useState(1500);
  const [vehicleSpeed, setVehicleSpeed] = useState(60); // km/h
  const [fuelLevel, setFuelLevel] = useState(85); // percentage
  const [coolantTemp, setCoolantTemp] = useState(90); // Celsius
  const [batteryVoltage, setBatteryVoltage] = useState(12.5); // Volts
  const [diagnosticCode, setDiagnosticCode] = useState('None'); // Simulated OBD-II codes

  // State variables for driving behavior
  const [harshBraking, setHarshBraking] = useState(0); // count
  const [rapidAcceleration, setRapidAcceleration] = useState(0); // count
  const [sharpTurns, setSharpTurns] = useState(0); // count
  const [driverSafetyScore, setDriverSafetyScore] = useState(95); // 0-100

  // State for simulated GPS data (simplified coordinates)
  const [latitude, setLatitude] = useState(34.0522);
  const [longitude, setLongitude] = useState(-118.2437);
  const [locationName, setLocationName] = useState('Downtown HQ'); // Simplified location name

  // State for predictive maintenance alert
  const [maintenanceAlert, setMaintenanceAlert] = useState(null);

  /**
   * Simulates real-time data updates for vehicle health and driving behavior.
   * In a real system, this data would be streamed from OBD-II, Accelerometer, and GPS
   * sensors on edge devices to Google Cloud.
   */
  useEffect(() => {
    const dataInterval = setInterval(() => {
      // Simulate vehicle health data fluctuations
      const newRPM = Math.floor(Math.random() * 500) + 1200; // 1200-1700 RPM
      const newSpeed = Math.floor(Math.random() * 40) + 40; // 40-80 km/h
      const newFuel = Math.max(0, Math.min(100, fuelLevel + (Math.random() * 2 - 1))); // +/- 1%
      const newCoolantTemp = parseFloat((coolantTemp + (Math.random() * 2 - 1)).toFixed(1)); // +/- 1 C
      const newBatteryVoltage = parseFloat((batteryVoltage + (Math.random() * 0.1 - 0.05)).toFixed(2)); // +/- 0.05V

      setEngineRPM(newRPM);
      setVehicleSpeed(newSpeed);
      setFuelLevel(newFuel);
      setCoolantTemp(newCoolantTemp);
      setBatteryVoltage(newBatteryVoltage);

      // Simulate occasional diagnostic codes
      if (Math.random() < 0.02) { // 2% chance of a new code
        const codes = ['P0420 (Catalyst System Efficiency Below Threshold)', 'P0301 (Cylinder 1 Misfire)', 'P0171 (System Too Lean)', 'Brake Fluid Low'];
        setDiagnosticCode(codes[Math.floor(Math.random() * codes.length)]);
        setMaintenanceAlert('DIAGNOSTIC ALERT: Check ' + codes[Math.floor(Math.random() * codes.length)]);
        setTimeout(() => setDiagnosticCode('None'), 10000); // Clear after 10s
        setTimeout(() => setMaintenanceAlert(null), 10000); // Clear alert
      } else {
        setDiagnosticCode('None');
      }

      // Simulate driving behavior events
      let currentHarshBraking = harshBraking;
      let currentRapidAcceleration = rapidAcceleration;
      let currentSharpTurns = sharpTurns;

      if (Math.random() < 0.01) { currentHarshBraking++; setHarshBraking(currentHarshBraking); }
      if (Math.random() < 0.01) { currentRapidAcceleration++; setRapidAcceleration(currentRapidAcceleration); }
      if (Math.random() < 0.01) { currentSharpTurns++; setSharpTurns(currentSharpTurns); }

      // Simulate driver safety score based on events (lower score for more events)
      const newSafetyScore = Math.max(0, 100 - (currentHarshBraking * 5 + currentRapidAcceleration * 3 + currentSharpTurns * 2));
      setDriverSafetyScore(newSafetyScore);

      // Simulate GPS movement (simplified)
      setLatitude(parseFloat((latitude + (Math.random() * 0.001 - 0.0005)).toFixed(4)));
      setLongitude(parseFloat((longitude + (Math.random() * 0.001 - 0.0005)).toFixed(4)));

    }, 2000); // Update every 2 seconds

    // Clear interval on component unmount
    return () => clearInterval(dataInterval);
  }, [fuelLevel, batteryVoltage, latitude, longitude, harshBraking, rapidAcceleration, sharpTurns]); // Dependencies for state updates

  // Determine health status color
  const getHealthStatusColor = (code) => {
    if (code !== 'None') return 'bg-red-600';
    if (fuelLevel < 10 || batteryVoltage < 12.0 || coolantTemp > 100) return 'bg-orange-500';
    return 'bg-green-500';
  };

  // Determine safety score color
  const getSafetyScoreColor = (score) => {
    if (score < 60) return 'bg-red-600';
    if (score < 80) return 'bg-orange-500';
    return 'bg-green-500';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-700 text-gray-100 font-inter p-4 sm:p-8 rounded-lg shadow-xl">
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <script src="https://cdn.tailwindcss.com"></script>
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />

      {/* Header Section */}
      <header className="text-center mb-8">
        <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-600 mb-2">
          Vehicle Health & Driving Behavior Analytics
        </h1>
        <p className="text-lg text-gray-300">Fleet Monitoring & Predictive Insights</p>
      </header>

      {/* Vehicle Overview Section */}
      <section className="bg-gray-800 p-6 rounded-lg shadow-lg border border-blue-700 mb-8">
        <h2 className="text-2xl sm:text-3xl font-bold text-center text-blue-300 mb-3">
          Vehicle: <span className="text-blue-400">{vehicleId}</span>
        </h2>
        {maintenanceAlert && (
          <div className="mt-4 p-4 bg-red-600 text-white rounded-md text-center text-lg font-semibold animate-pulse">
            <p>Maintenance Alert: {maintenanceAlert}</p>
          </div>
        )}
      </section>

      {/* Key Metrics Grid */}
      <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {/* Vehicle Health Status */}
        <div className={`p-6 rounded-lg shadow-lg transition-colors duration-300 ${getHealthStatusColor(diagnosticCode)}`}>
          <h3 className="text-xl font-semibold mb-2 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.002 12.002 0 005 12c0 2.514.805 4.886 2.15 6.817M17 12c0 2.514-.805 4.886-2.15 6.817M2 12h20M7 12a5 5 0 0110 0v2a5 5 0 01-10 0v-2z"></path></svg>
            Vehicle Health
          </h3>
          <p className="text-4xl font-bold text-white mb-2">
            {diagnosticCode !== 'None' ? 'WARNING' : 'NORMAL'}
          </p>
          <p className="text-sm text-white italic">{diagnosticCode !== 'None' ? diagnosticCode : 'No issues detected'}</p>
        </div>

        {/* Driver Safety Score */}
        <div className={`p-6 rounded-lg shadow-lg transition-colors duration-300 ${getSafetyScoreColor(driverSafetyScore)}`}>
          <h3 className="text-xl font-semibold mb-2 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.002 12.002 0 005 12c0 2.514.805 4.886 2.15 6.817M17 12c0 2.514-.805 4.886-2.15 6.817M2 12h20M7 12a5 5 0 0110 0v2a5 5 0 01-10 0v-2z"></path></svg>
            Driver Safety Score
          </h3>
          <p className="text-4xl font-bold text-white">{driverSafetyScore}</p>
          <p className="text-sm text-white">({harshBraking} harsh brakes, {rapidAcceleration} rapid accels, {sharpTurns} sharp turns)</p>
        </div>

        {/* Current Location */}
        <div className="bg-gray-800 p-6 rounded-lg shadow-lg border border-purple-700">
          <h3 className="text-xl font-semibold mb-2 text-purple-300 flex items-center">
            <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
            Current Location
          </h3>
          <p className="text-2xl font-bold text-purple-400">{locationName}</p>
          <p className="text-sm text-gray-400">Lat: {latitude}, Lon: {longitude}</p>
          <p className="text-xs text-gray-500 mt-1">Simulated movement</p>
        </div>
      </section>

      {/* Detailed Vehicle Parameters */}
      <section className="bg-gray-800 p-6 rounded-lg shadow-lg border border-gray-700 mb-8">
        <h2 className="text-2xl font-bold text-gray-200 mb-4 text-center">Detailed Vehicle Parameters</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
          <div className="flex justify-between items-center bg-gray-700 p-3 rounded-md">
            <span className="text-gray-300">Engine RPM:</span>
            <span className="font-bold text-blue-400">{engineRPM}</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700 p-3 rounded-md">
            <span className="text-gray-300">Vehicle Speed:</span>
            <span className="font-bold text-blue-400">{vehicleSpeed} km/h</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700 p-3 rounded-md">
            <span className="text-gray-300">Fuel Level:</span>
            <span className="font-bold text-blue-400">{fuelLevel}%</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700 p-3 rounded-md">
            <span className="text-gray-300">Coolant Temp:</span>
            <span className="font-bold text-blue-400">{coolantTemp}°C</span>
          </div>
          <div className="flex justify-between items-center bg-gray-700 p-3 rounded-md">
            <span className="text-gray-300">Battery Voltage:</span>
            <span className="font-bold text-blue-400">{batteryVoltage} V</span>
          </div>
        </div>
      </section>

      {/* System Information / Disclaimer */}
      <section className="bg-gray-800 p-6 rounded-lg shadow-lg border border-gray-700 text-gray-400 text-sm italic">
        <h3 className="text-lg font-semibold mb-2 text-gray-200">System Information:</h3>
        <p>
          This dashboard provides a conceptual simulation of a Vehicle Health & Driving Behavior Analytics system.
          In a complete system, real-time data from OBD-II sensors, accelerometers, and GPS modules would be
          collected by telematics units. This data would be ingested via Google Cloud IoT Core (or Pub/Sub),
          stored in BigQuery, and analyzed using AutoML to predict maintenance needs and driver patterns.
        </p>
        <p className="mt-2 text-xs">
          <span className="font-bold">Disclaimer:</span> This is a simulated environment and should not be used for actual fleet management or safety-critical operations.
        </p>
      </section>

      {/* Footer Section */}
      <footer className="text-center mt-8 text-gray-500 text-sm">
        <p>&copy; {new Date().getFullYear()} Fleet Analytics Solutions. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;
